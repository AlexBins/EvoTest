function [ mpga ] = evolute_multipop(pop_size, migration_rate, migration_interval , migration_cycles, migration_policy )
    % Build and execute an multipopulation instance
    %% pop_size, migration_rate, migration_interval , migration_cycles, migration_policy
    %% return the final population
    
    % Choosing -2.5 as ny for x location and 0 for y.
    % Choosing 2 as sigma for x location and 3 for y. This is because it is
    % ok if the car is located at -4.5 or -0.5 as well, but further away
    % should be punished a bit. Same goes for the right side
    fit_loc_left = FitnessFactory.get_car_location_punishing(-2.5, 0, 2, 2^4);
    fit_loc_right = FitnessFactory.get_car_location_punishing(2.5, 0, 2, 2^4);
    
    fit_orientation_right = FitnessFactory.get_car_orientation_punishing(-pi /4, pi /4, 0);
    fit_orientation_left = FitnessFactory.get_car_orientation_punishing(3 * pi /4, 5 * pi /4, 0);
    fit_orientation_top = FitnessFactory.get_car_orientation_punishing(pi / 4, 3 * pi / 4, 0);
    fit_orientation_bottom = FitnessFactory.get_car_orientation_punishing(5 * pi / 4, -pi /4, 0);

    fit_simulation = FitnessFactory.get_complete();

    fit_collision = FitnessFactory.get_collision_enforcing(0.001);
    
    fit_slot = FitnessFactory.get_min_parking_slot();

    fit_distance = FitnessFactory.get_distance_to_trajectory();

    % Testcase: To the left of the slot facing left
    tc_left_left = FitnessFactory.get_combined(...
        fit_loc_left,...
        fit_orientation_left, ...
        fit_simulation,...
        fit_collision,...
        fit_slot);%,...
        %fit_distance,...);
    % Testcase: To the left of the slot facing right
    tc_left_right = FitnessFactory.get_combined(...
        fit_loc_left,...
        fit_orientation_right, ...
        fit_simulation,...
        fit_collision,...
        fit_slot);%,...
        %fit_distance);
    % Testcase: To the left of the slot facing top
    tc_left_top = FitnessFactory.get_combined(...
        fit_loc_left,...
        fit_orientation_top, ...
        fit_simulation,...
        fit_collision,...
        fit_slot);%,...
        %fit_distance);
    % Testcase: To the left of the slot facing bottom
    tc_left_bottom = FitnessFactory.get_combined(...
        fit_loc_left,...
        fit_orientation_bottom, ...
        fit_simulation,...
        fit_collision,...
        fit_slot);%,...
        %fit_distance);
    % Testcase: To the right of the slot facing left
    tc_right_left = FitnessFactory.get_combined(...
        fit_loc_right,...
        fit_orientation_left, ...
        fit_simulation,...
        fit_collision,...
        fit_slot);%,...
        %fit_distance);
    % Testcase: To the right of the slot facing right
    tc_right_right = FitnessFactory.get_combined(...
        fit_loc_right,...
        fit_orientation_right, ...
        fit_simulation,...
        fit_collision,...
        fit_slot);%,...
        %fit_distance);
    % Testcase: To the right of the slot facing top
    tc_right_top = FitnessFactory.get_combined(...
        fit_loc_right,...
        fit_orientation_top, ...
        fit_simulation,...
        fit_collision,...
        fit_slot);%,...
        %fit_distance);
    % Testcase: To the right of the slot facing bottom
    tc_right_bottom = FitnessFactory.get_combined(...
        fit_loc_right,...
        fit_orientation_bottom, ...
        fit_simulation,...
        fit_collision,...
        fit_slot);%,...
        %fit_distance);

    mpga = MultiPopulationGA(pop_size);
    poplb = mpga.addPopulation(tc_left_bottom);
    popll = mpga.addPopulation(tc_left_left);
    poplr = mpga.addPopulation(tc_left_right);
    poplt = mpga.addPopulation(tc_left_top);
    poprb = mpga.addPopulation(tc_right_bottom);
    poprl = mpga.addPopulation(tc_right_left);
    poprr = mpga.addPopulation(tc_right_right);
    poprt = mpga.addPopulation(tc_right_top);
    mpga.enable_logging(true);

    mpga.runMPGA(migration_rate, migration_interval , migration_cycles, migration_policy);
end

