fit_left_border = FitnessFactory.get_car_location_punishing([-5; 0], [0; 1], false, 0);
fit_right_border = FitnessFactory.get_car_location_punishing([5; 0], [0; 1], true, 0);
fit_bottom_border = FitnessFactory.get_car_location_punishing([0; 1.5], [1; 0], true, 0);
fit_top_border = FitnessFactory.get_car_location_punishing([0; 3], [1; 0], false, 0);

fit_orientation_right = FitnessFactory.get_car_orientation_punishing(-pi /4, pi /4, 0);
fit_orientation_left = FitnessFactory.get_car_orientation_punishing(3 * pi /4, 5 * pi /4, 0);
fit_orientation_top = FitnessFactory.get_car_orientation_punishing(pi / 4, 3 * pi / 4, 0);
fit_orientation_bottom = FitnessFactory.get_car_orientation_punishing(5 * pi / 4, -pi /4, 0);

fit_simulation = FitnessFactory.get_complete();

fit_collision = FitnessFactory.get_collision_enforcing(0.001);

fit_distance = FitnessFactory.get_distance_to_trajectory();

fit_mid_border_left = FitnessFactory.get_car_location_punishing([-2; 0], [0; 1], true, 0);
fit_mid_border_right = FitnessFactory.get_car_location_punishing([2; 0], [0; 1], false, 0);
% Testcase: To the left of the slot facing left
tc_left_left = FitnessFactory.get_combined(...
    fit_left_border,...
    fit_mid_border_left,...
    fit_top_border,...
    fit_bottom_border,...
    fit_orientation_left, ...
    fit_simulation,...
    fit_collision,...
    fit_distance);
% Testcase: To the left of the slot facing right
tc_left_right = FitnessFactory.get_combined(...
    fit_left_border,...
    fit_mid_border_left,...
    fit_top_border,...
    fit_bottom_border,...
    fit_orientation_right, ...
    fit_simulation,...
    fit_collision,...
    fit_distance);
% Testcase: To the left of the slot facing top
tc_left_top = FitnessFactory.get_combined(...
    fit_left_border,...
    fit_mid_border_left,...
    fit_top_border,...
    fit_bottom_border,...
    fit_orientation_top, ...
    fit_simulation,...
    fit_collision,...
    fit_distance);
% Testcase: To the left of the slot facing bottom
tc_left_bottom = FitnessFactory.get_combined(...
    fit_left_border,...
    fit_mid_border_left,...
    fit_top_border,...
    fit_bottom_border,...
    fit_orientation_bottom, ...
    fit_simulation,...
    fit_collision,...
    fit_distance);
% Testcase: To the right of the slot facing left
tc_right_left = FitnessFactory.get_combined(...
    fit_right_border,...
    fit_mid_border_right,...
    fit_top_border,...
    fit_bottom_border,...
    fit_orientation_left, ...
    fit_simulation,...
    fit_collision,...
    fit_distance);
% Testcase: To the right of the slot facing right
tc_right_right = FitnessFactory.get_combined(...
    fit_right_border,...
    fit_mid_border_right,...
    fit_top_border,...
    fit_bottom_border,...
    fit_orientation_right, ...
    fit_simulation,...
    fit_collision,...
    fit_distance);
% Testcase: To the right of the slot facing top
tc_right_top = FitnessFactory.get_combined(...
    fit_right_border,...
    fit_mid_border_right,...
    fit_top_border,...
    fit_bottom_border,...
    fit_orientation_top, ...
    fit_simulation,...
    fit_collision,...
    fit_distance);
% Testcase: To the right of the slot facing bottom
tc_right_bottom = FitnessFactory.get_combined(...
    fit_right_border,...
    fit_mid_border_right,...
    fit_top_border,...
    fit_bottom_border,...
    fit_orientation_bottom, ...
    fit_simulation,...
    fit_collision,...
    fit_distance);

mpga = MultiPopulationGA(10);
poplb = mpga.addPopulation(tc_left_bottom);
popll = mpga.addPopulation(tc_left_left);
poplr = mpga.addPopulation(tc_left_right);
poplt = mpga.addPopulation(tc_left_top);
poprb = mpga.addPopulation(tc_right_bottom);
poprl = mpga.addPopulation(tc_right_left);
poprr = mpga.addPopulation(tc_right_right);
poprt = mpga.addPopulation(tc_right_top);

mpga.runMPGA(1, 20, 20, 'ring');

pops = mpga.pops;
n = mpga.npop;
chrs = Chromosome.empty;
for i = 1:n
    chrs(:,i) = pops(i).chromosomes;
end
figure;
hold on;
axis([-2.5 2.5 -1 4]);
colors = 'yckmrgby';
for i = 1:size(chrs, 1)
    for j = 1:size(chrs,2)
        [x, y, angle, ~, ~] = chrs(i, j).get_physical_data();
        quiver(x, y, cos(angle), sin(angle), 'Color', colors(j));
    end
end